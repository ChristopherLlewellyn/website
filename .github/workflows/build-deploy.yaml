name: Build & Deploy
on:
  push:
    branches:
      - master
      - staging

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

      - name: Login to Registry
        run: docker login docker.pkg.github.com -u ${GITHUB_ACTOR} -p ${{ secrets.GITHUB_TOKEN }}

      - name: Check out code into the Go module directory
        uses: actions/checkout@v1

      - name: Build image
        env:
          IMAGE_NAME: website
          IMAGE_TAG: ${{ github.sha }}
        run: |
          BRANCH=$(echo ${GITHUB_REF} | sed -e "s/refs\/heads\///g")
          docker build --build-arg BRANCH=$BRANCH -t docker.pkg.github.com/${GITHUB_REPOSITORY}/${IMAGE_NAME}:${IMAGE_TAG} .

      - name: Publish image
        env:
          IMAGE_NAME: website
        run: docker push docker.pkg.github.com/${GITHUB_REPOSITORY}/${IMAGE_NAME}

      - name: Logout
        run: docker logout docker.pkg.github.com

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    steps:

      - name: Set up config
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
          KUBE_CONFIG_STAGING: ${{ secrets.KUBE_CONFIG_STAGING }}
        run: |
          BRANCH=$(echo ${GITHUB_REF} | sed -e "s/refs\/heads\///g")
          if [ "$BRANCH" == "staging" ]; then KUBE_CONFIG=$KUBE_CONFIG_STAGING; fi
          mkdir -p ${HOME}/.kube
          export KUBECONFIG=${HOME}/.kube/config
          echo $KUBE_CONFIG | base64 -d > $KUBECONFIG

      - name: Deploy image
        env:
          DEPLOYMENT: website
          CONTAINER: website
          IMAGE_NAME: website
          IMAGE_TAG: ${{ github.sha }}
        run: kubectl set image deployment/${DEPLOYMENT} ${CONTAINER}=docker.pkg.github.com/${GITHUB_REPOSITORY}/${IMAGE_NAME}:${IMAGE_TAG}

      - name: Check rollout
        if: success()
        env:
          DEPLOYMENT: website
        run: kubectl rollout status deployment/${DEPLOYMENT} -w --timeout=5m

      - name: Roll back
        if: failure()
        env:
          DEPLOYMENT: website
        run: kubectl rollout undo deployment/${DEPLOYMENT}
